#!/bin/bash

TMPDIR=
PREVDIR=`pwd`
export SCRIPT=$0
SCRIPTDIR=`dirname $0`

pushd $SCRIPTDIR >/dev/null
SCRIPTDIR=`pwd`
popd >/dev/null

set -u
set -e
trap onexit INT
trap onexit TERM
trap onexit EXIT

PLATFORM=

case "`uname -s`" in
Linux)  export PLATFORM=linux ;;
Darwin) export PLATFORM=osx ;;
MINGW*) export PLATFORM=windows ;;
CYGWIN*)
	case "`uname -m`" in
	x86_64) export PLATFORM=cygwin64 ;;
	*)      export PLATFORM=cygwin ;;
	esac
	;;
*)      echo "Unsupported platform";  exit 1 ;;
esac

uid()
{
  id | cut -f2 -d = | cut -f1 -d \(;
}

onexit()
{
	cd $PREVDIR
	if [ ! "$TMPDIR" = "" ]; then
		RESULTS=`find $TMPDIR -uid 0`
		if [ ! -z "$RESULTS" -a ! `uid` -eq 0 ]; then
			sudo rm -rf $TMPDIR
		else
			rm -rf $TMPDIR
		fi
	fi
}

usage()
{
	echo
	echo "USAGE: $SCRIPT [options] [branch/tag (default = master)]"
	echo
	echo "Options:"
	echo "-b <dir> = Specify build directory"
	echo "           (default = ~/src/vgl.nightly/$BUILD)"
	echo "-e = Use existing source tarball in the build directory"
	echo "-f = Force new build (deletes all existing build files in the build directory)"
	echo "-fb = Use existing source tarball in the build directory, but force new"
	echo "      binaries to be built for this platform"
	echo "-l = Generate file list and HTML index"
	echo "-r <url> = Specify Git repository URL"
	echo "           (default = $DEFAULT_REPO)"
	echo "-s = Generate source package(s) only"
	echo "-v = Verbose (show the output of the build in real time)"
	echo
	exit 1
}

update_list()
{
	if [ ! -d $OUTDIR/files ]; then
		echo
		echo Build does not exist in $OUTDIR/files!
		echo
		exit 1
	fi
	cd $OUTDIR/files
	if [ -f files.txt ]; then rm -f files.txt; fi
	if [ -f ../files.txt ]; then rm -f ../files.txt; fi
	if [ -f index.html ]; then rm -f index.html; fi
	if [ -f ../index.html ]; then rm -f ../index.html; fi
	echo "<html><body><table border=1 cellpadding=5>" >../index.html
	echo "<tr><th>File</th><th>Size</th><th>Date</th><th>MD5 sum</th></tr>" >>../index.html
	for i in *; do
		if [ -d $i -a "$i" != "cygwin" ]; then continue; fi
		LSL=`ls -l $i`
		SIZE=
		DATE=
		MD5=
		if [ ! -d $i ]; then
			SIZE=`echo $LSL | awk '{print $5}'`
			DATE=`echo $LSL | awk '{print $6" "$7}'`
			MD5=`md5sum -b $i | awk '{print $1}'`
		fi
		echo -e "$i\t$SIZE\t\t$DATE\t$MD5" >>../files.txt
		echo -e "<tr><td><a href=\"$i\">$i</a></td><td>$SIZE</td><td>$DATE</td><td>$MD5</td></tr>" >>../index.html
	done
	echo "</html></body>" >>../index.html
	mv ../files.txt .
	mv ../index.html .
}

BUILD=`date +%Y%m%d`
export OUTDIR=$HOME/src/vgl.nightly/$BUILD
LATEST=1

FORCE=0
export FORCEBINARY=0
SRCONLY=0
NOSRC=0
UPDATELIST=0
VERBOSE=0
TAG=master
DEFAULT_REPO=https://github.com/VirtualGL/virtualgl.git
REPO=$DEFAULT_REPO

while [ $# -gt 0 ]; do
	if [ "$1" = "-f" ]; then
		FORCE=1
	elif [ "$1" = "-fb" ]; then
		export FORCEBINARY=1
		NOSRC=1
	elif [ "$1" = "-s" ]; then
		SRCONLY=1
	elif [ "$1" = "-e" ]; then
		NOSRC=1
	elif [ "$1" = "-b" ]; then
		OUTDIR=$2
		LATEST=0
		shift
	elif [ "$1" = "-l" ]; then
		UPDATELIST=1
	elif [ "$1" = "-v" ]; then
		VERBOSE=1
	elif [ "$1" = "-r" ]; then
		REPO=$2
		shift
	elif [ "$1" = "-h" -o "$1" = "-?" ]; then
		usage
	else
		TAG=$1
	fi
	shift
done

if [ $SRCONLY = 1 -a $NOSRC = 1 ]; then
	echo ERROR: Cannot specify -s with -fb or -e
	exit 1
fi

if [ $UPDATELIST = 1 ]; then
	update_list
	exit 0
fi

if [ ! -d $OUTDIR ]; then
	mkdir -p $OUTDIR/files
else
	if [ $FORCE = 0 -a $NOSRC = 0 ]; then
		if [ $SRCONLY = 0 ]; then
			echo
			echo Build already exists in $OUTDIR/files!
			echo "Run $SCRIPT -f to force a full rebuild"
			echo " or $SCRIPT -e to use existing source"
			echo
			exit 1
		fi
	else
		if [ $NOSRC = 0 ]; then
			if [ -d $OUTDIR/files ]; then
				rm -rf $OUTDIR/files/cygwin
				rm -f $OUTDIR/files/*
				rmdir $OUTDIR/files
			fi
			rm -f $OUTDIR/*
			rmdir $OUTDIR
			mkdir -p $OUTDIR/files
		fi
	fi
fi

umask 022
if [ "$PLATFORM" = "windows" ]; then
	# /tmp maps to a directory in c:\Documents and Settings, which causes
	# barfage in the MinGW resource compiler because of the pathname
	# spaces.
	export TMPDIR=`mktemp -d /c/temp/vglbuild.XXXXXX`
else
	export TMPDIR=`mktemp -d /tmp/vglbuild.XXXXXX`
fi
cd $TMPDIR
if [ $NOSRC = 0 ]; then
	echo Checking out VirtualGL from $TAG ...
	git clone --depth=1 -b $TAG $REPO vgl
	echo Creating source tarball and SRPM ...
	cp -R vgl vgl.pristine
	pushd vgl.pristine
	rm -rf .git .gitattributes .gitignore .travis.yml ci
	popd
	pushd vgl
	VERSION=`grep "set(VERSION" CMakeLists.txt | sed -e s/[^0-9\.]//g`
	if [ "$VERSION" = "" ]; then
		echo Could not parse version from CMakeLists.txt!
		exit 1
	fi
	if [ "$PLATFORM" = "windows" ]; then
		cmake -G"NMake Makefiles" -DCMAKE_BUILD_TYPE=RelWithDebInfo .
		nmake dist
	else
		cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=RelWithDebInfo .
		make dist
	fi
	popd
	mv vgl/VirtualGL-$VERSION.tar.gz $OUTDIR/files
	tar xfz $OUTDIR/files/VirtualGL-$VERSION.tar.gz
	diff -r vgl.pristine VirtualGL-$VERSION
	rm -rf vgl.pristine
	if [ -f $SCRIPTDIR/gpgsign ]; then
		. $SCRIPTDIR/gpgsign
		if [ -f $OUTDIR/files/VirtualGL-$VERSION.tar.gz.sig ]; then
			rm -f $OUTDIR/files/VirtualGL-$VERSION.tar.gz.sig
		fi
		gpg --batch --default-key "$GPG_KEY_ID" --passphrase "$GPG_KEY_PASS" --detach-sig $OUTDIR/files/VirtualGL-$VERSION.tar.gz
		gpg --verify $OUTDIR/files/VirtualGL-$VERSION.tar.gz.sig
	fi
	if [ "$PLATFORM" = "linux" ]; then
		pushd vgl
		make srpm
		popd
		mv vgl/VirtualGL-$VERSION.src.rpm $OUTDIR/files/
		if [ -f $SCRIPTDIR/gpgsign ]; then
			. $SCRIPTDIR/gpgsign
			expect $SCRIPTDIR/rpmsign "$GPG_KEY_PASS" "$GPG_KEY_NAME" $OUTDIR/files/VirtualGL-$VERSION.src.rpm
			rpm --checksig $OUTDIR/files/VirtualGL-$VERSION.src.rpm
		fi
	fi
	rm -rf vgl vgl-$VERSION
else
	if [ "$PLATFORM" = "linux" ]; then
		if ! ls $OUTDIR/files/VirtualGL-[0-9]*.tar.gz >/dev/null 2>&1
			-o ! ls $OUTDIR/files/VirtualGL-[0-9]*.src.rpm >/dev/null 2>&1; then
			echo Source files do not exist!
			exit 1
		fi
	else
		if [ ! -f $OUTDIR/files/VirtualGL-[0-9]*.tar.gz ]; then
			echo Source tarball does not exist!
			exit 1
		fi
	fi
fi

if [ $SRCONLY = 1 ]; then
	exit 0
fi

echo Untarring VirtualGL ...
tar xfz $OUTDIR/files/VirtualGL-[0-9]*.tar.gz
echo   done.
echo Building VirtualGL for $PLATFORM...
if [ $VERBOSE = 1 ]; then
	sh $SCRIPTDIR/buildvgl.$PLATFORM | tee $OUTDIR/log-$PLATFORM.txt
else
	sh $SCRIPTDIR/buildvgl.$PLATFORM > $OUTDIR/log-$PLATFORM.txt
fi
echo   done.

update_list

if [ "$PLATFORM" != "windows" -a "$PLATFORM" != "cygwin" -a "$PLATFORM" != "cygwin64" -a $LATEST = 1 ]; then
	# sym links aren't implemented properly in MinGW or Cygwin
	if [ -h $OUTDIR/../latest ]; then rm $OUTDIR/../latest; fi
	ln -fs $BUILD $OUTDIR/../latest
fi

exit 0
